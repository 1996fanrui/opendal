"use strict";(self.webpackChunkopendal_website=self.webpackChunkopendal_website||[]).push([[7162],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>g});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var d=a.createContext({}),s=function(e){var n=a.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=s(e.components);return a.createElement(d.Provider,{value:n},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,d=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=s(t),m=o,g=c["".concat(d,".").concat(m)]||c[m]||u[m]||r;return t?a.createElement(g,l(l({ref:n},p),{},{components:t})):a.createElement(g,l({ref:n},p))}));function g(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,l=new Array(r);l[0]=m;var i={};for(var d in n)hasOwnProperty.call(n,d)&&(i[d]=n[d]);i.originalType=e,i[c]="string"==typeof e?e:o,l[1]=i;for(var s=2;s<r;s++)l[s]=t[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},9390:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>s});var a=t(7462),o=(t(7294),t(3905));const r={title:"Getting started",sidebar_position:3},l=void 0,i={unversionedId:"getting-started",id:"getting-started",title:"Getting started",description:"OpenDAL can be easily integrated into different software with its Rust core and multilingual bindings.",source:"@site/docs/getting-started.md",sourceDirName:".",slug:"/getting-started",permalink:"/docs/getting-started",draft:!1,editUrl:"https://github.com/apache/incubator-opendal/tree/main/website/docs/getting-started.md",tags:[],version:"current",lastUpdatedBy:"tison",lastUpdatedAt:1695956544,formattedLastUpdatedAt:"Sep 29, 2023",sidebarPosition:3,frontMatter:{title:"Getting started",sidebar_position:3},sidebar:"docs",previous:{title:"Vision",permalink:"/docs/vision"},next:{title:"Services",permalink:"/docs/category/services"}},d={},s=[{value:"Rust core",id:"rust-core",level:2},{value:"Install",id:"install",level:3},{value:"Demo",id:"demo",level:3},{value:"Java binding",id:"java-binding",level:2},{value:"Install",id:"install-1",level:3},{value:"Maven",id:"maven",level:4},{value:"Gradle",id:"gradle",level:4},{value:"Classified library",id:"classified-library",level:4},{value:"Demo",id:"demo-1",level:3},{value:"Python binding",id:"python-binding",level:2},{value:"Demo",id:"demo-2",level:3},{value:"Node.js binding",id:"nodejs-binding",level:2},{value:"Demo",id:"demo-3",level:3}],p={toc:s},c="wrapper";function u(e){let{components:n,...t}=e;return(0,o.kt)(c,(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"OpenDAL can be easily integrated into different software with its Rust core and multilingual bindings."),(0,o.kt)("h2",{id:"rust-core"},"Rust core"),(0,o.kt)("p",null,"OpenDAL's core is implemented in Rust programming language. The most convenient way to use OpenDAL in your Rust program add the OpenDAL Cargo crate as a dependency."),(0,o.kt)("h3",{id:"install"},"Install"),(0,o.kt)("p",null,"Run the following Cargo command in your project directory:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"cargo add opendal\n")),(0,o.kt)("p",null,"Or add the following line to your Cargo.toml:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'opendal = "0.40.0"\n')),(0,o.kt)("h3",{id:"demo"},"Demo"),(0,o.kt)("p",null,"Try it out:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'use opendal::Result;\nuse opendal::layers::LoggingLayer;\nuse opendal::services;\nuse opendal::Operator;\n\n#[tokio::main]\nasync fn main() -> Result<()> {\n    // Pick a builder and configure it.\n    let mut builder = services::S3::default();\n    builder.bucket("test");\n\n    // Init an operator\n    let op = Operator::new(builder)?\n        // Init with logging layer enabled.\n        .layer(LoggingLayer::default())\n        .finish();\n\n    // Write data\n    op.write("hello.txt", "Hello, World!").await?;\n\n    // Read data\n    let bs = op.read("hello.txt").await?;\n\n    // Fetch metadata\n    let meta = op.stat("hello.txt").await?;\n    let mode = meta.mode();\n    let length = meta.content_length();\n\n    // Delete\n    op.delete("hello.txt").await?;\n\n    Ok(())\n}\n')),(0,o.kt)("h2",{id:"java-binding"},"Java binding"),(0,o.kt)("p",null,"OpenDAL's Java binding is released to Maven central as ",(0,o.kt)("a",{parentName:"p",href:"https://central.sonatype.com/artifact/org.apache.opendal/opendal-java"},(0,o.kt)("inlineCode",{parentName:"a"},"org.apache.opendal:opendal-java:${version}")),"."),(0,o.kt)("h3",{id:"install-1"},"Install"),(0,o.kt)("h4",{id:"maven"},"Maven"),(0,o.kt)("p",null,"Generally, you can first add the ",(0,o.kt)("inlineCode",{parentName:"p"},"os-maven-plugin")," for automatically detect the classifier based on your platform:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-xml"},"<build>\n<extensions>\n  <extension>\n    <groupId>kr.motd.maven</groupId>\n    <artifactId>os-maven-plugin</artifactId>\n    <version>1.7.0</version>\n  </extension>\n</extensions>\n</build>\n")),(0,o.kt)("p",null,"Then add the dependency to opendal-java as following:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-xml"},"<dependencies>\n<dependency>\n  <groupId>org.apache.opendal</groupId>\n  <artifactId>opendal-java</artifactId>\n  <version>${opendal.version}</version>\n</dependency>\n<dependency>\n  <groupId>org.apache.opendal</groupId>\n  <artifactId>opendal-java</artifactId>\n  <version>${opendal.version}</version>\n  <classifier>${os.detected.classifier}</classifier>\n</dependency>\n</dependencies>\n")),(0,o.kt)("h4",{id:"gradle"},"Gradle"),(0,o.kt)("p",null,"For Gradle, you can first add the ",(0,o.kt)("inlineCode",{parentName:"p"},"com.google.osdetector")," for automatically detect the classifier based on your platform:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-groovy"},'plugins {\n    id "com.google.osdetector" version "1.7.3"\n}\n')),(0,o.kt)("p",null,"Then add the dependency to opendal-java as following:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-groovy"},'dependencies {\n    implementation "org.apache.opendal:opendal-java:$opendal.version"\n    implementation "org.apache.opendal:opendal-java:$opendal.version:$osdetector.classifier"\n}\n')),(0,o.kt)("h4",{id:"classified-library"},"Classified library"),(0,o.kt)("p",null,"For details in specifying classified library, read the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/apache/incubator-opendal/tree/main/bindings/java"},"dedicated explanation"),"."),(0,o.kt)("h3",{id:"demo-1"},"Demo"),(0,o.kt)("p",null,"Try it out:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'final Map<String, String> conf = new HashMap<>();\nfinal Operator op = Operator.of("memory", conf);\n// Write data\nop.write("hello.txt", "Hello, World!").join();\n// Read data\nfinal byte[] bs = op.read("hello.txt").join();\n// Delete\nop.delete("hello.txt").join();\n')),(0,o.kt)("h2",{id:"python-binding"},"Python binding"),(0,o.kt)("h3",{id:"demo-2"},"Demo"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'import opendal\nimport asyncio\n\nasync def main():\n    op = opendal.AsyncOperator("fs", root="/tmp")\n    await op.write("test.txt", b"Hello World")\n    print(await op.read("test.txt"))\n\nasyncio.run(main())\n')),(0,o.kt)("h2",{id:"nodejs-binding"},"Node.js binding"),(0,o.kt)("h3",{id:"demo-3"},"Demo"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'import { Operator } from "opendal";\n\nasync function main() {\n  const op = new Operator("fs", { root: "/tmp" });\n  await op.write("test", "Hello, World!");\n  const bs = await op.read("test");\n  console.log(new TextDecoder().decode(bs));\n  const meta = await op.stat("test");\n  console.log(`contentLength: ${meta.contentLength}`);\n}\n')))}u.isMDXComponent=!0}}]);